Program.Sub.ScreenSU.Start
gui.F_MaintCfgFile..create
gui.F_MaintCfgFile..caption("Workcenter HTML Configurations")
gui.F_MaintCfgFile..size(6270,4635)
gui.F_MaintCfgFile..minx(0)
gui.F_MaintCfgFile..miny(0)
gui.F_MaintCfgFile..position(0,0)
gui.F_MaintCfgFile..event(unload,f_maintcfgfile_unload)
gui.F_MaintCfgFile..alwaysontop(False)
gui.F_MaintCfgFile..fontname("Arial")
gui.F_MaintCfgFile..fontsize(8)
gui.F_MaintCfgFile..forecolor(0)
gui.F_MaintCfgFile..fontstyle(,,,,)
gui.F_MaintCfgFile..BackColor(-2147483633)
gui.F_MaintCfgFile..controlbox(True)
gui.F_MaintCfgFile..maxbutton(True)
gui.F_MaintCfgFile..minbutton(True)
gui.F_MaintCfgFile..mousepointer(0)
gui.F_MaintCfgFile..moveable(True)
gui.F_MaintCfgFile..sizeable(True)
gui.F_MaintCfgFile..ShowInTaskBar(True)
gui.F_MaintCfgFile..titlebar(True)
gui.F_MaintCfgFile.lblWorkCentersGrid.create(label,"Workcenters:",True,2025,225,1,110,645,True,0,Arial,8,-2147483633,0)
gui.F_MaintCfgFile.lblWorkCentersGrid.defaultvalue("")
gui.F_MaintCfgFile.lblWorkCentersGrid.controlgroup(0)
gui.F_MaintCfgFile.gsfg_Workcenters.create(gsflexgrid)
gui.F_MaintCfgFile.gsfg_Workcenters.FixedRows(0)
gui.F_MaintCfgFile.gsfg_Workcenters.FixedCols(0)
gui.F_MaintCfgFile.gsfg_Workcenters.visible(True)
gui.F_MaintCfgFile.gsfg_Workcenters.size(5775,2475)
gui.F_MaintCfgFile.gsfg_Workcenters.zorder(0)
gui.F_MaintCfgFile.gsfg_Workcenters.position(100,900)
gui.F_MaintCfgFile.gsfg_Workcenters.enabled(True)
gui.F_MaintCfgFile.gsfg_Workcenters.event(posttextmatrix,gsfg_workcenters_posttextmatrix)
gui.F_MaintCfgFile.gsfg_Workcenters.event(commandclick,gsfg_workcenters_commandclick)
gui.F_MaintCfgFile.cmdSaveWCs.create(button)
gui.F_MaintCfgFile.cmdSaveWCs.caption("Save")
gui.F_MaintCfgFile.cmdSaveWCs.visible(True)
gui.F_MaintCfgFile.cmdSaveWCs.size(855,375)
gui.F_MaintCfgFile.cmdSaveWCs.zorder(0)
gui.F_MaintCfgFile.cmdSaveWCs.position(100,3500)
gui.F_MaintCfgFile.cmdSaveWCs.enabled(True)
gui.F_MaintCfgFile.cmdSaveWCs.fontname("Arial")
gui.F_MaintCfgFile.cmdSaveWCs.fontsize(8)
gui.F_MaintCfgFile.cmdSaveWCs.event(click,cmdsavewcs_click)
gui.F_MaintCfgFile.cmdSaveWCs.defaultvalue("")
gui.F_MaintCfgFile.cmdSaveWCs.controlgroup(0)
gui.F_MaintCfgFile.cmdAddWC.create(button)
gui.F_MaintCfgFile.cmdAddWC.caption("Add Workcenter")
gui.F_MaintCfgFile.cmdAddWC.visible(True)
gui.F_MaintCfgFile.cmdAddWC.size(1560,375)
gui.F_MaintCfgFile.cmdAddWC.zorder(0)
gui.F_MaintCfgFile.cmdAddWC.position(4300,3500)
gui.F_MaintCfgFile.cmdAddWC.enabled(True)
gui.F_MaintCfgFile.cmdAddWC.fontname("Arial")
gui.F_MaintCfgFile.cmdAddWC.fontsize(8)
gui.F_MaintCfgFile.cmdAddWC.event(click,cmdaddwc_click)
gui.F_MaintCfgFile.cmdAddWC.defaultvalue("")
gui.F_MaintCfgFile.cmdAddWC.controlgroup(0)
gui.F_MaintCfgFile.txtLogo.create(textbox,"",True,5265,300,0,100,300,False,0,Arial,8,-2147483643,1)
gui.F_MaintCfgFile.txtLogo.defaultvalue("")
gui.F_MaintCfgFile.txtLogo.controlgroup(0)
gui.F_MaintCfgFile.lblLogo.create(label,"Logo(280px X 85px):",True,2010,255,1,125,100,True,0,Arial,8,-2147483633,0)
gui.F_MaintCfgFile.lblLogo.defaultvalue("")
gui.F_MaintCfgFile.lblLogo.controlgroup(0)
gui.F_MaintCfgFile.cmdLogoBrws.create(button)
gui.F_MaintCfgFile.cmdLogoBrws.caption("^")
gui.F_MaintCfgFile.cmdLogoBrws.visible(True)
gui.F_MaintCfgFile.cmdLogoBrws.size(405,390)
gui.F_MaintCfgFile.cmdLogoBrws.zorder(0)
gui.F_MaintCfgFile.cmdLogoBrws.position(5480,260)
gui.F_MaintCfgFile.cmdLogoBrws.enabled(True)
gui.F_MaintCfgFile.cmdLogoBrws.fontname("Arial")
gui.F_MaintCfgFile.cmdLogoBrws.fontsize(8)
gui.F_MaintCfgFile.cmdLogoBrws.event(click,cmdlogobrws_click)
gui.F_MaintCfgFile.cmdLogoBrws.defaultvalue("")
gui.F_MaintCfgFile.cmdLogoBrws.controlgroup(0)


Program.Sub.ScreenSU.End

Program.Sub.Preflight.Start

Variable.UDT.uJob.Define("Job",String,WorkOrder)
Variable.UDT.uJob.Define("Seq",String,Seq)
Variable.UDT.uJob.Define("Workcenter",String,Workcenter)
Variable.UDT.uJob.Define("Customer",String)
Variable.UDT.uJob.Define("Customer_PO",String)
Variable.UDT.uJob.Define("Employee",String)
Variable.UDT.uJob.Define("Part",String)
Variable.UDT.uJob.Define("Priority",String)
Variable.UDT.uJob.Define("Qty_Order",Float,Units_Open)
Variable.UDT.uJob.Define("Qty_Completed",Float,Units_Complete)
Variable.UDT.uJob.Define("Date_Due",String)
Variable.UDT.uJob.Define("Release_Date",String)
Variable.UDT.uJob.Define("Qty_Ord_String",String)
Variable.UDT.uJob.Define("Qty_Complete_String",String)
Variable.UDT.uJob.Define("Seq_Date_Due",Date,Seq_Date_Due)
Variable.UDT.uJob.Define("Seq_Date_String",String)
Variable.uGlobal.uJob.Declare("uJob")
Variable.UDT.uJobCopy.Define("Job",String,WorkOrder)
Variable.UDT.uJobCopy.Define("Seq",String,Seq)
Variable.UDT.uJobCopy.Define("Workcenter",String,Workcenter)
Variable.UDT.uJobCopy.Define("Customer",String)
Variable.UDT.uJobCopy.Define("Customer_PO",String)
Variable.UDT.uJobCopy.Define("Employee",String)
Variable.UDT.uJobCopy.Define("Part",String)
Variable.UDT.uJobCopy.Define("Priority",String)
Variable.UDT.uJobCopy.Define("Qty_Order",Float,Units_Open)
Variable.UDT.uJobCopy.Define("Qty_Completed",Float,Units_Complete)
Variable.UDT.uJobCopy.Define("Date_Due",String)
Variable.UDT.uJobCopy.Define("Release_Date",String)
Variable.UDT.uJobCopy.Define("Qty_Ord_String",String)
Variable.UDT.uJobCopy.Define("Qty_Complete_String",String)
Variable.UDT.uJobCopy.Define("Seq_Date_Due",Date,Seq_Date_Due)
Variable.UDT.uJobCopy.Define("Seq_Date_String",String)
Variable.uGlobal.uJobCopy.Declare("uJobCopy")
Variable.Global.sWCs.Declare(String)
Program.Sub.Preflight.End

Program.Sub.Main.Start
F.Intrinsic.Control.SetErrorHandler("Main_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)

'THis is HTML page that displays open jobs by WC defined by a .cfg file that stores the Work Centers that need to be displayed.
'Included in this program is a maintenance program to add and remove WC's that do not need an html page displayed.
'Coded by SFF
'5/1/2015

V.Local.sSql.Declare(String)
V.Local.sRet.Declare(String)
V.Global.sTitles.Declare(String)
V.Local.i.Declare(Float)
V.Local.iRow.Declare(Float)
V.Local.sWorkcenters.Declare(String)
V.Local.sFile.Declare(String)
V.Local.sDate.Declare(String)
V.Local.bExists.Declare(Boolean)
V.Local.sWC.Declare(String)

V.uGlobal.uJob.Redim(-1,-1)


F.ODBC.Connection!conX.OpenConnection(V.Ambient.PDSN,V.Ambient.PUser,V.Ambient.PPass)

F.Intrinsic.String.Build("{0}\Workcenters.cfg",V.Caller.FilesDir,V.Local.sFile)
F.Intrinsic.File.Exists(V.Local.sFile,V.Local.bExists)

'Switches <> "M" then make html files
F.Intrinsic.Control.If(V.Caller.Switches,<>,"M")
	'open web pages by Workcenters
	V.Global.sTitles.set("Customer*!*Customer PO*!*Part Number*!*Job Number*!*Sequence*!*WC*!*Priority*!*Qty Ordered*!*Qty Completed*!*Completed Due Date*!*Sequence Due Date*!*Employee Name")
	'get WC's
	F.Intrinsic.Control.If(V.Local.bExists,=,False)
		'Error Logging .cfg File does not exist, Maintenance Program needs to be ran and saved
		V.Local.sError.Set("Workcenter.cfg File is Corrupted or does NOT exist! Run Workcenter Configuration: Online>Administration>Shop Floor WebPage Configuration")
		F.Intrinsic.String.Build("{0}\HTML\Error_Log.txt",V.Caller.FilesDir,V.Local.sFile)
		F.Intrinsic.File.String2File(V.Local.sFile,V.Local.sError)
		F.Intrinsic.Control.End
	F.Intrinsic.Control.EndIf

	'Load Work Centers to string
	F.intrinsic.file.file2string(V.local.sFile,V.local.sRet)
	F.Intrinsic.Control.If(V.Local.sRet.Trim,=,"")
		'Error Logging Configuration File Errors
		V.Local.sError.Set("Workcenter.cfg File is Corrupted or does NOT exist! Run Workcenter Configuration: Online>Administration>Shop Floor WebPage Configuration")
		F.Intrinsic.String.Build("{0}\HTML\Error_Log.txt",V.Caller.FilesDir,V.Local.sFile)
		F.Intrinsic.File.String2File(V.Local.sFile,V.Local.sError)
		F.Intrinsic.Control.End
	F.Intrinsic.Control.EndIf
	'set local  to be used
	F.intrinsic.string.split(V.local.sRet,"!*!",V.local.sWorkcenters)
	'loop through Workcenters String Passing WC and Cutoff Days
	F.Intrinsic.Control.For(V.Local.i,V.Local.sWorkcenters.LBound,V.Local.sWorkcenters.UBound,1)
		'split to get workcenter*!*blank*!*cutoffdays*!*blank
		F.Intrinsic.String.Split(V.Local.sWorkcenters(v.Local.i),"*!*",V.Local.sWC)

		'load UDT with job detail based on WC and Cutoff Days
		F.Intrinsic.Control.If(V.Local.sWC(0).Trim,<>,"")
			F.Intrinsic.Control.CallSub(Getopenjobs,"WC",V.Local.sWC(0),"Cutoff",V.Local.sWC(2))
			F.Intrinsic.Control.CallSub(Loadtable,"WC",V.Local.sWC(0))
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.Next(V.Local.i)

F.Intrinsic.Control.Else
	'launch maintenance screen
	F.Intrinsic.Control.CallSub(Buildstyles)
	'if .cfg file exists then load existing data
	F.Intrinsic.Control.If(V.Local.bExists,=,True)
		F.Intrinsic.Control.CallSub(Load_gsfgworkcenters,"File",V.Local.sFile)
	F.Intrinsic.Control.EndIf
	'Load Default Logo
	F.Intrinsic.Control.CallSub(Loadlogo)
	Gui.F_MaintCfgFile..Show
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Label("Main_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_OPEN_JOBS_HTML_CAST.gas",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
Function.Intrinsic.Control.EndIf


Program.Sub.Main.End

Program.Sub.LoadTable.Start
F.Intrinsic.Control.SetErrorHandler("LoadTable_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)
V.Local.sRet.Declare(String)
V.Local.sFile.Declare(String)
V.Local.iHandle.Declare(Long)
V.Local.sHTML.Declare(String)
V.Local.sTemp.Declare(String)
V.Local.sSQl.Declare(String)
V.Local.i.Declare(String)
V.Local.sDate.Declare(String)
V.Local.sReplace.Declare(String)
V.Local.sDate2.Declare(String)
V.Local.dDate.Declare(Date)
V.Local.sMonth.Declare(String)
V.Local.sDay.Declare(String)
V.Local.sYear.Declare(String)
V.Local.iLead.Declare(Long)

'Get lead Time of WC
F.Intrinsic.String.Build("Select cast(LEADTIME as INT) as LEADTIME from CNL_LEADTIME where WC = '{0}' ",V.Args.WC,V.Local.sSQl)
F.ODBC.Connection!conX.OpenRecordsetRO("rst",V.Local.sSQl)
F.Intrinsic.Control.If(V.ODBC.conX!rst.EOF,<>,True)
	V.Local.iLead.Set(V.ODBC.conX!rst.FieldValLong!LEADTIME)
F.Intrinsic.Control.EndIf
F.ODBC.conX!rst.Close

'first go throug UDT and add the css class tag for coloring the specific cells based on priority and duedate
F.Intrinsic.Control.For(V.Local.i,V.uGlobal.uJob.LBound,V.uGlobal.uJob.UBound,1)
	'Color priority and job columns based on priority
	F.Intrinsic.Control.SelectCase(V.uGlobal.uJob(v.Local.i)!Priority)
		Function.Intrinsic.Control.Case(999)
			F.Intrinsic.String.Build("<td class={0}red-cells{0}>{1}",V.Ambient.DblQuote,V.uGlobal.uJob(v.Local.i)!Priority,V.Local.sRet)
			V.uGlobal.uJob(v.Local.i)!Priority.Set(V.Local.sRet)
			F.Intrinsic.String.Build("<td class={0}red-cells{0}>{1}",V.Ambient.DblQuote,V.uGlobal.uJob(v.Local.i)!Job,V.Local.sRet)
			V.uGlobal.uJob(v.Local.i)!Job.Set(V.Local.sRet)
		Function.Intrinsic.Control.Case(998)
			F.Intrinsic.String.Build("<td class={0}orange-cells{0}>{1}",V.Ambient.DblQuote,V.uGlobal.uJob(v.Local.i)!Priority,V.Local.sRet)
			V.uGlobal.uJob(v.Local.i)!Priority.Set(V.Local.sRet)
			F.Intrinsic.String.Build("<td class={0}orange-cells{0}>{1}",V.Ambient.DblQuote,V.uGlobal.uJob(v.Local.i)!Job,V.Local.sRet)
			V.uGlobal.uJob(v.Local.i)!Job.Set(V.Local.sRet)
		Function.Intrinsic.Control.Case(997)
			F.Intrinsic.String.Build("<td class={0}yellow-cells{0}>{1}",V.Ambient.DblQuote,V.uGlobal.uJob(v.Local.i)!Priority,V.Local.sRet)
			V.uGlobal.uJob(v.Local.i)!Priority.Set(V.Local.sRet)
			F.Intrinsic.String.Build("<td class={0}yellow-cells{0}>{1}",V.Ambient.DblQuote,V.uGlobal.uJob(v.Local.i)!Job,V.Local.sRet)
			V.uGlobal.uJob(v.Local.i)!Job.Set(V.Local.sRet)
		Function.Intrinsic.Control.Case(996)
			F.Intrinsic.String.Build("<td class={0}mist-cells{0}>{1}",V.Ambient.DblQuote,V.uGlobal.uJob(v.Local.i)!Priority,V.Local.sRet)
			V.uGlobal.uJob(v.Local.i)!Priority.Set(V.Local.sRet)
			F.Intrinsic.String.Build("<td class={0}mist-cells{0}>{1}",V.Ambient.DblQuote,V.uGlobal.uJob(v.Local.i)!Job,V.Local.sRet)
			V.uGlobal.uJob(v.Local.i)!Job.Set(V.Local.sRet)
		Function.Intrinsic.Control.Case(995)
			F.Intrinsic.String.Build("<td class={0}blue-cells{0}>{1}",V.Ambient.DblQuote,V.uGlobal.uJob(v.Local.i)!Priority,V.Local.sRet)
			V.uGlobal.uJob(v.Local.i)!Priority.Set(V.Local.sRet)
			F.Intrinsic.String.Build("<td class={0}blue-cells{0}>{1}",V.Ambient.DblQuote,V.uGlobal.uJob(v.Local.i)!Job,V.Local.sRet)
			V.uGlobal.uJob(v.Local.i)!Job.Set(V.Local.sRet)
		Function.Intrinsic.Control.Case(994)
			F.Intrinsic.String.Build("<td class={0}gray-cells{0}>{1}",V.Ambient.DblQuote,V.uGlobal.uJob(v.Local.i)!Priority,V.Local.sRet)
			V.uGlobal.uJob(v.Local.i)!Priority.Set(V.Local.sRet)
			F.Intrinsic.String.Build("<td class={0}gray-cells{0}>{1}",V.Ambient.DblQuote,V.uGlobal.uJob(v.Local.i)!Job,V.Local.sRet)
			V.uGlobal.uJob(v.Local.i)!Job.Set(V.Local.sRet)
		Function.Intrinsic.Control.Case(993)
			F.Intrinsic.String.Build("<td class={0}cyan-cells{0}>{1}",V.Ambient.DblQuote,V.uGlobal.uJob(v.Local.i)!Priority,V.Local.sRet)
			V.uGlobal.uJob(v.Local.i)!Priority.Set(V.Local.sRet)
			F.Intrinsic.String.Build("<td class={0}cyan-cells{0}>{1}",V.Ambient.DblQuote,V.uGlobal.uJob(v.Local.i)!Job,V.Local.sRet)
			V.uGlobal.uJob(v.Local.i)!Job.Set(V.Local.sRet)
		Function.Intrinsic.Control.Case(992)
			F.Intrinsic.String.Build("<td class={0}magenta-cells{0}>{1}",V.Ambient.DblQuote,V.uGlobal.uJob(v.Local.i)!Priority,V.Local.sRet)
			V.uGlobal.uJob(v.Local.i)!Priority.Set(V.Local.sRet)
			F.Intrinsic.String.Build("<td class={0}magenta-cells{0}>{1}",V.Ambient.DblQuote,V.uGlobal.uJob(v.Local.i)!Job,V.Local.sRet)
			V.uGlobal.uJob(v.Local.i)!Job.Set(V.Local.sRet)
	F.Intrinsic.Control.EndSelect

	F.Intrinsic.Control.If(V.uGlobal.uJob(v.Local.i)!Job.Trim,<>,"")

		'break up passed date and form string in "MMDDYY" format to convert back to date so it can be compared to ambient date.
		F.Intrinsic.Control.If(V.uGlobal.uJob(v.Local.i)!Seq_Date_Due.string,<>,"1/1/1900","OR",V.uGlobal.uJob(v.Local.i)!Seq_Date_Due.String,<>,"")

			'subtract lead time
			F.Intrinsic.Date.DateSubtractWorkdays(V.uGlobal.uJob(v.Local.i)!Seq_Date_Due,V.Local.iLead,V.Local.dDate)
			
			F.Intrinsic.String.Split(V.Local.dDate.String,"/",V.Local.sDate)
			V.Local.sDay.Set(V.Local.sDate(1).Trim)
			F.Intrinsic.String.LPad(V.Local.sDay.Trim,"0",2,V.Local.sDay)
			V.Local.sMonth.Set(V.Local.sDate(0).Trim)
			F.Intrinsic.String.LPad(V.Local.sMonth,"0",2,V.Local.sMonth)
			F.Intrinsic.String.Mid(V.Local.sDate(2).Trim,3,2,V.Local.sYear)
			V.Local.sDate.Redim(0,0)
			F.Intrinsic.String.Build("{0}{1}{2}",V.Local.sMonth,V.Local.sDay,V.Local.sYear,V.Local.sDate)
			F.Intrinsic.Control.If(V.Local.sDate,<>,"010100")
				F.Intrinsic.Date.ConvertDString(V.Local.sDate,"MM/DD/YYYY",V.Local.dDate)
				'if due date is past due then color due date field red
				F.Intrinsic.Control.If(V.Local.dDate,<=,V.Ambient.Date)
					F.Intrinsic.String.Build("<td class={0}red-cells{0}>{1}",V.Ambient.DblQuote,V.Local.dDate.String,V.Local.sRet)
					V.uGlobal.uJob(v.Local.i)!Seq_Date_String.Set(V.Local.sRet)
				F.Intrinsic.Control.Else
					V.uGlobal.uJob(v.Local.i)!Seq_date_String.Set(V.Local.dDate.String)
				F.Intrinsic.Control.EndIf
			F.Intrinsic.Control.EndIf
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.EndIf

	F.Intrinsic.Control.If(V.uGlobal.uJob(v.Local.i)!Release_Date,=,"1/1/1900")
		V.uGlobal.uJob(v.Local.i)!Release_Date.Set("")
	F.Intrinsic.Control.EndIf

	'put quantities in string variable so that blank records that are passed can be actually blank when table is created
	F.Intrinsic.Control.If(V.uGlobal.uJob(v.Local.i)!Job.Trim,<>,"")
		V.uGlobal.uJob(v.Local.i)!Qty_Complete_String.Set(V.uGlobal.uJob(v.Local.i)!Qty_Completed)
		V.uGlobal.uJob(v.Local.i)!Qty_Ord_String.Set(V.uGlobal.uJob(v.Local.i)!Qty_Order)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.Next(V.Local.i)

'if more than ubound of UDT is more than 34 than add 10 rows to beginning and end, this will help with the scolling so users can see last records longer
F.Intrinsic.Control.If(V.uGlobal.uJob.UBound,>=,30)
	V.uGlobal.uJobCopy.Redim(0,10)
	F.Intrinsic.Variable.UDTCopy(V.uGlobal.uJob,V.uGlobal.uJobCopy,True)
	F.Intrinsic.Math.Add(V.uGlobal.uJobCopy.UBound,10,V.Local.i)
	V.uGlobal.uJobCopy.RedimPreserve(0,V.Local.i)
F.Intrinsic.Control.Else
	V.uGlobal.uJobCopy.Redim(0,0)
	F.Intrinsic.Variable.UDTCopy(V.uGlobal.uJob,V.uGlobal.uJobCopy,False)
F.Intrinsic.Control.EndIf

F.Intrinsic.Variable.UDTMultiQuickSort(V.uGlobal.uJobCopy!Seq_Date_Due,False)

'load udt in to HTML table string to replace wildcard in HTML file
f.Intrinsic.String.HTMLTableFromUDT(v.uGlobal.uJobCopy,"Customer*!*Customer_PO*!*Part*!*Job*!*Seq*!*Workcenter*!*Priority*!*Qty_Ord_String*!*Qty_Complete_String*!*Date_Due*!*Seq_date_String*!*Release_Date*!*Employee","","",True,v.Local.sRet)


'edit tags for cells to make sure only the correct tag is passed to the HTML file
F.Intrinsic.String.Build("<td><td class={0}red-cells{0}>",V.Ambient.DblQuote,V.Local.sTemp)
F.Intrinsic.String.Build("<td class={0}red-cells{0}>",V.Ambient.DblQuote,V.Local.sReplace)
F.Intrinsic.String.Replace(V.Local.sRet,V.Local.sTemp,V.Local.sReplace,V.Local.sRet)

F.Intrinsic.String.Build("<td><td class={0}orange-cells{0}>",V.Ambient.DblQuote,V.Local.sTemp)
F.Intrinsic.String.Build("<td class={0}orange-cells{0}>",V.Ambient.DblQuote,V.Local.sReplace)
F.Intrinsic.String.Replace(V.Local.sRet,V.Local.sTemp,V.Local.sReplace,V.Local.sRet)

F.Intrinsic.String.Build("<td><td class={0}yellow-cells{0}>",V.Ambient.DblQuote,V.Local.sTemp)
F.Intrinsic.String.Build("<td class={0}yellow-cells{0}>",V.Ambient.DblQuote,V.Local.sReplace)
F.Intrinsic.String.Replace(V.Local.sRet,V.Local.sTemp,V.Local.sReplace,V.Local.sRet)

F.Intrinsic.String.Build("<td><td class={0}mist-cells{0}>",V.Ambient.DblQuote,V.Local.sTemp)
F.Intrinsic.String.Build("<td class={0}mist-cells{0}>",V.Ambient.DblQuote,V.Local.sReplace)
F.Intrinsic.String.Replace(V.Local.sRet,V.Local.sTemp,V.Local.sReplace,V.Local.sRet)

F.Intrinsic.String.Build("<td><td class={0}gray-cells{0}>",V.Ambient.DblQuote,V.Local.sTemp)
F.Intrinsic.String.Build("<td class={0}gray-cells{0}>",V.Ambient.DblQuote,V.Local.sReplace)
F.Intrinsic.String.Replace(V.Local.sRet,V.Local.sTemp,V.Local.sReplace,V.Local.sRet)

F.Intrinsic.String.Build("<td><td class={0}blue-cells{0}>",V.Ambient.DblQuote,V.Local.sTemp)
F.Intrinsic.String.Build("<td class={0}blue-cells{0}>",V.Ambient.DblQuote,V.Local.sReplace)
F.Intrinsic.String.Replace(V.Local.sRet,V.Local.sTemp,V.Local.sReplace,V.Local.sRet)

F.Intrinsic.String.Build("<td><td class={0}cyan-cells{0}>",V.Ambient.DblQuote,V.Local.sTemp)
F.Intrinsic.String.Build("<td class={0}cyan-cells{0}>",V.Ambient.DblQuote,V.Local.sReplace)
F.Intrinsic.String.Replace(V.Local.sRet,V.Local.sTemp,V.Local.sReplace,V.Local.sRet)

F.Intrinsic.String.Build("<td><td class={0}magenta-cells{0}>",V.Ambient.DblQuote,V.Local.sTemp)
F.Intrinsic.String.Build("<td class={0}magenta-cells{0}>",V.Ambient.DblQuote,V.Local.sReplace)
F.Intrinsic.String.Replace(V.Local.sRet,V.Local.sTemp,V.Local.sReplace,V.Local.sRet)

'find and replace <table> tag with the below table tag with attributes
'<!--<table class="TFtable" border="0"><tbody>-->
F.Intrinsic.String.Replace(V.Local.sRet,"<table>","<table class="TFtable" border="0"><tbody>",V.Local.sRet)
F.Intrinsic.String.Replace(V.Local.sRet,"</table>","</tbody></table>",V.Local.sRet)

'find <td> and replace with <td class="data-cell">
F.Intrinsic.String.Build("<td class={0}data-cell{0}>",V.Ambient.DblQuote,V.Local.sTemp)
F.Intrinsic.String.Replace(V.Local.sRet,"<td>",V.Local.sTemp,V.Local.sRet)

'left and right cells on each row<td>&nbsp;</td>
F.Intrinsic.String.Replace(V.Local.sRet,"<tr>","<tr><td>&nbsp;</td>",V.Local.sRet)
F.Intrinsic.String.Replace(V.Local.sRet,"</tr>","<td>&nbsp;</td></tr>",V.Local.sRet)

F.Intrinsic.String.Build("{0}\HTML\OPEN_JOBS_TEMP.html",V.Caller.FilesDir,V.Local.sFile)
'load template
F.Intrinsic.File.File2String(V.Local.sFile,V.Local.sHTML)

'replace wildcard from template with html table(v.local.sRet)
F.Intrinsic.String.Replace(V.Local.sHTML,"<!--Data Table-->",V.Local.sRet,V.Local.sHTML)

'Replace "Shop Floor Screen with Work Center Name"
F.Intrinsic.string.Build("Select WC_NAME from v_Workcenters where MACHINE = '{0}'",V.Args.WC,V.Local.sSql)
F.ODBC.Connection!conX.OpenRecordsetRO("rst",V.Local.sSQl)
F.Intrinsic.Control.If(V.ODBC.conX!rst.EOF,<>,True)
	F.Intrinsic.String.Build("<td rowspan="2" class="FF_hdr">{0}-{1}",V.Args.WC,V.ODBC.conX!rst.FieldValTrim!WC_NAME,V.Local.sRet)
	F.Intrinsic.String.Replace(V.Local.sHTML,"<td rowspan="2" class="FF_hdr">Shop Floor Screen",V.Local.sRet,V.Local.sHTML)
	F.Intrinsic.String.Build("<title>{0}-{1}",V.Args.WC,V.ODBC.conX!rst.FieldValTrim!WC_NAME,V.Local.sRet)
	F.Intrinsic.String.Replace(V.Local.sHTML,"<title>Shop Floor Screen",V.Local.sRet,V.Local.sHTML)
F.Intrinsic.Control.Else
	F.Intrinsic.String.Build("<td rowspan="2" class="FF_hdr">Workcenter: {0}",V.Args.WC,V.Local.sRet)
	F.Intrinsic.String.Replace(V.Local.sHTML,"<td rowspan="2" class="FF_hdr">Shop Floor Screen",V.Local.sRet,V.Local.sHTML)
	F.Intrinsic.String.Build("<title>Workcenter: {0}",V.Args.WC,V.Local.sRet)
	F.Intrinsic.String.Replace(V.Local.sHTML,"<title>Shop Floor Screen",V.Local.sRet,V.Local.sHTML)
F.Intrinsic.Control.EndIf
F.ODBC.conX!rst.Close

'save new HTML file for that workcenter
F.Intrinsic.String.Build("{0}\HTML\OPEN_JOBS_{1}.html",V.Caller.FilesDir,V.Args.WC,V.Local.sFile)
F.Intrinsic.File.String2File(V.Local.sFile,V.Local.sHTML)

'check if it is ran from menu item to initially launch the screens
F.Intrinsic.Control.If(V.Caller.Switches,=,"O")
	F.Intrinsic.Task.ShellExec(V.Caller.Handle,"OPEN",V.Local.sFile,"","",1)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("LoadTable_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_OPEN_JOBS_HTML_CAST.gas",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
Function.Intrinsic.Control.EndIf


Program.Sub.LoadTable.End

Program.Sub.GetOpenJobs.Start
F.Intrinsic.Control.SetErrorHandler("GetOpenJobs_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)
'Build UDT with Open Job info

V.Local.sSql.Declare(String)
V.Local.i.Declare(Long)
V.Local.sDate.Declare(String)
V.Local.sCutoffDate.Declare(String)
V.Local.dDate.Declare(Date)
V.Local.iDays.Declare(Long)
V.Local.sTemp.Declare(String)
V.Local.sRet.Declare(String)

F.Intrinsic.Control.If(V.Args.Cutoff,<>,"")
	F.Intrinsic.Math.ConvertToFloat(V.Args.Cutoff,V.Local.iDays)
F.Intrinsic.Control.Else
	V.Local.iDays.Set(7)
F.Intrinsic.Control.EndIf

F.Intrinsic.Date.DateAdd("D",V.local.iDays,V.ambient.date,V.local.dDate)

F.Intrinsic.String.Format(V.Local.dDate,"YYYY-MM-DD",V.Local.sCutoffDate)

V.uGlobal.uJob.Redim(-1,-1)

F.Intrinsic.Variable.SetUDTFieldReference(V.uGlobal.uJob!Employee,"Employee")
F.Intrinsic.Variable.SetUDTFieldReference(V.uGlobal.uJob!Seq_Date_Due,"")
F.Intrinsic.Variable.SetUDTFieldReference(V.uGlobal.uJob!QTY_COMPLETED,"")
F.Intrinsic.Variable.SetUDTFieldReference(V.uGlobal.uJob!QTY_ORDER,"")

F.Intrinsic.String.Build("Select job + '-' + Suffix as WorkOrder, Employee,Seq,Workcenter from v_JOBS_IN_PROCESS_G where WORKCENTER = '{0}'",V.Args.WC,V.Local.sSql)
F.ODBC.Connection!conX.OpenRecordsetRO("rst",V.Local.sSql)
F.Intrinsic.Control.If(V.ODBC.conX!rst.EOF,<>,True)
	F.Intrinsic.Variable.LoadUDTFromRecordset("conX","rst","v.uGlobal.uJob",False)
F.Intrinsic.Control.EndIf
F.ODBC.conX!rst.Close

F.Intrinsic.Control.For(V.Local.i,V.uGlobal.uJob.LBound,V.uGlobal.uJob.UBound,1)
	
	'BUILD Exclusion Clause so there are NOT duplicates in HTML File
	F.Intrinsic.String.Build("{2}'{0}-{1}'",V.uGlobal.uJob(v.Local.i)!Job.Trim,V.uGlobal.uJob(v.Local.i)!Seq,V.local.sTemp,V.Local.sTemp)

	'Get other job operations detail for the WIP sequences
	F.Intrinsic.String.Build("Select job + '-' + sfx as WorkOrder, pcsremain as UNITS_OPEN,pcscompl as UNITS_COMPLETE, cast(duedate as date) as Date_Due from APSV3_JBLINES  where WorkOrder = '{0}'",V.uGlobal.uJob(v.Local.i)!Job,V.Local.sSql)
	F.ODBC.Connection!conX.OpenRecordsetRO("rst",V.Local.sSql)
	F.Intrinsic.Control.If(V.ODBC.conX!rst.EOF,<>,True)
		V.uGlobal.uJob(v.Local.i)!Seq_Date_Due.Set(V.ODBC.conX!rst.FieldVal!Date_Due)
		V.uGlobal.uJob(v.Local.i)!QTY_ORDER.Set(V.ODBC.conX!rst.FieldVal!UNITS_OPEN)
		V.uGlobal.uJob(v.Local.i)!QTY_COMPLETED.Set(V.ODBC.conX!rst.FieldVal!UNITS_COMPLETE)
	F.Intrinsic.Control.EndIf
	F.ODBC.conX!rst.Close

	'Get Employees Name
	F.Intrinsic.String.Build("Select Name from v_EMPLOYEE_MSTR where Employee = '{0}'",V.uGlobal.uJob(v.Local.i)!Employee,V.Local.sSql)
	F.ODBC.Connection!conX.OpenRecordsetRO("rst2",V.Local.sSql)
	F.Intrinsic.Control.If(V.ODBC.conX!rst2.EOF,<>,True)
		V.uGlobal.uJob(v.Local.i)!Employee.Set(V.ODBC.conX!rst2.FieldValTrim!Name)
	F.Intrinsic.Control.EndIf
	F.ODBC.conX!rst2.Close
F.Intrinsic.Control.Next(V.Local.i)

F.Intrinsic.Control.If(V.Local.sTemp.Trim,<>,"")
	F.Intrinsic.String.Replace(V.Local.sTemp,"''","','",V.Local.sTemp)
F.Intrinsic.Control.EndIf

F.Intrinsic.Variable.SetUDTFieldReference(V.uGlobal.uJob!Employee,"")
F.Intrinsic.Variable.SetUDTFieldReference(V.uGlobal.uJob!Seq_Date_Due,"Seq_Date_Due")
F.Intrinsic.Variable.SetUDTFieldReference(V.uGlobal.uJob!QTY_COMPLETED,"UNITS_COMPLETE")
F.Intrinsic.Variable.SetUDTFieldReference(V.uGlobal.uJob!QTY_ORDER,"UNITS_OPEN")

'Now Get the rest of JOB Operations
F.Intrinsic.Control.If(V.uGlobal.uJob.UBound,<>,-1)
	F.Intrinsic.String.Build("Select job + '-' + sfx as WorkOrder, pcsremain as UNITS_OPEN,pcscompl as UNITS_COMPLETE, cast(duedate as date) as Seq_date_due, Seq, seqres as Workcenter from APSV3_JBLINES a where seqType = '1'  and seqres = '{0}' and duedate <='{1}' and WorkOrder NOT in ({2})",V.Args.WC,V.Local.sCutoffDate,V.Local.sTemp,V.Local.sSql)
F.Intrinsic.Control.Else
	F.Intrinsic.String.Build("Select job + '-' + sfx as WorkOrder, pcsremain as UNITS_OPEN,pcscompl as UNITS_COMPLETE, cast(duedate as date) as Seq_date_due, Seq, seqres as Workcenter from APSV3_JBLINES where seqType = '1' and seqres = '{0}' and duedate <='{1}'",V.Args.WC,V.Local.sCutoffDate,V.Local.sSql)
F.Intrinsic.Control.EndIf
F.ODBC.Connection!conX.OpenRecordsetRO("rst2",V.Local.sSql)
F.Intrinsic.Control.If(V.ODBC.conX!rst2.EOF,<>,True)
	'Load Job Detail
	F.Intrinsic.Control.If(V.uGlobal.uJob.UBound,=,-1)
		F.Intrinsic.Variable.LoadUDTFromRecordset("conX","rst2","V.uGlobal.uJob",False)
	F.Intrinsic.Control.Else
		F.Intrinsic.Variable.LoadUDTFromRecordset("conX","rst2","V.uGlobal.uJob",True)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndIf
F.ODBC.conX!rst2.Close

F.Intrinsic.Control.For(V.Local.i,V.uGlobal.uJob.LBound,V.uGlobal.uJob.UBound,1)
	'load additional header data
	F.Intrinsic.String.Build("Select Description as Part,Customer,Customer_PO,Priority,Date_Due,Priority from v_JOB_Header where Job + '-' + Suffix = '{0}'",V.uGlobal.uJob(v.Local.i)!Job.trim,V.Local.sSql)
	F.ODBC.Connection!conX.OpenRecordsetRO("rst",V.Local.sSql)
	F.Intrinsic.Control.If(V.ODBC.conX!rst.EOF,<>,True)
		V.uGlobal.uJob(v.Local.i)!Part.Set(V.ODBC.conX!rst.FieldValTrim!Part)
		V.uGlobal.uJob(v.Local.i)!Priority.Set(V.ODBC.conX!rst.FieldValTrim!Priority)
		V.uGlobal.uJob(v.Local.i)!Customer_PO.Set(V.ODBC.conX!rst.FieldValTrim!Customer_PO)
		V.uGlobal.uJob(v.Local.i)!Date_Due.Set(V.ODBC.conX!rst.FieldVal!Date_Due)
		'Get Customer+Name_Customer
		F.Intrinsic.String.Build("Select Customer + ' - ' + Name_Customer as Customer from v_Customer_Master where Customer = '{0}'",V.ODBC.conX!rst.FieldValTrim!Customer,V.Local.sSql)
		F.ODBC.Connection!conX.OpenRecordsetRO("rst2",V.Local.sSql)
		F.Intrinsic.Control.If(V.ODBC.conX!rst2.EOF,<>,True)
			V.uGlobal.uJob(v.Local.i)!Customer.Set(V.ODBC.conX!rst2.FieldValTrim!Customer)
		F.Intrinsic.Control.EndIf
		F.ODBC.conX!rst2.Close
	F.Intrinsic.Control.EndIf
	F.ODBC.conX!rst.Close

	'get release date from custom table base on previous custom work customer has had done.
	F.Intrinsic.String.Build("Select REL_DATE from GAB_WODASH_RELDT where JOB + '-' + SUFFIX = '{0}'",V.uGlobal.uJob(v.Local.i)!Job.Trim,V.Local.sSql)
	F.ODBC.Connection!conX.OpenRecordsetRO("rst",V.Local.sSql)
	F.Intrinsic.Control.If(V.ODBC.conX!rst.EOF,<>,True)
		V.uGlobal.uJob(v.Local.i)!Release_Date.Set(V.ODBC.conX!rst.FieldVal!REL_DATE)
	F.Intrinsic.Control.EndIf
	F.ODBC.conX!rst.Close

	'Left Pad Sequence back to Six Characters
	F.Intrinsic.String.LPad(V.uGlobal.uJob(v.Local.i)!Seq,"0",6,V.Local.sRet)
	V.uGlobal.uJob(v.Local.i)!Seq.Set(V.Local.sRet)
F.Intrinsic.Control.Next(V.Local.i)

'***************OLD SELECT STATEMENTS FROM JOB OPERATIONS**************************

''Get Job Header info
'V.Local.sSql.Set("Select Job + '-' + Suffix as Job from v_JOB_HEADER where DATE_CLOSED = '1900-01-01'")
'F.ODBC.Connection!conX.OpenRecordsetRO("rst",V.Local.sSql)
'F.Intrinsic.Control.If(V.ODBC.conX!rst.EOF,<>,True)
'	F.Intrinsic.Control.DoUntil(V.ODBC.conX!rst.EOF,=,True)
'			'where Part = 'WC' and cutoff date = current date + cutoff days
'			F.Intrinsic.Variable.SetUDTFieldReference(V.uGlobal.uJob!Employee,"Employee")
'			F.Intrinsic.String.Build("Select a.Job + '-' + a.Suffix as Job, a.UNITS_OPEN,a.UNITS_COMPLETE, a.Date_Due as Seq_Date_Due, a.Seq, a.Part as Workcenter, b.Employee from v_JOB_OPERATIONS a left outer join v_jobs_in_process_g b on a.job+a.suffix+a.seq = b.job+b.suffix+b.seq where a.Job + '-' + a.Suffix = '\{0\}' and a.date_completed = '1900-01-01' and  a.Seq < '995000' and a.LMO = 'L' and a.Part = '\{1\}' and a.Date_Due <='\{2\}'",V.ODBC.conX!rst.FieldValTrim!Job,V.Args.WC,V.Local.sCutoffDate,V.Local.sSql)
'			F.ODBC.Connection!conX.OpenRecordsetRO("rst2",V.Local.sSql)
'			F.Intrinsic.Control.If(V.ODBC.conX!rst2.EOF,<>,True)
'				'Load Job Detail
'				F.Intrinsic.Control.If(V.uGlobal.uJob.UBound,=,-1)
'					F.Intrinsic.Variable.LoadUDTFromRecordset("conX","rst2","V.uGlobal.uJob",False)
'				F.Intrinsic.Control.Else
'					F.Intrinsic.Variable.LoadUDTFromRecordset("conX","rst2","V.uGlobal.uJob",True)
'				F.Intrinsic.Control.EndIf
'			F.Intrinsic.Control.EndIf
'			F.ODBC.conX!rst2.Close
'		F.ODBC.conX!rst.MoveNext
'	F.Intrinsic.Control.Loop
'F.Intrinsic.Control.EndIf
'F.ODBC.conX!rst.Close
'
'F.Intrinsic.Control.For(V.Local.i,V.uGlobal.uJob.LBound,V.uGlobal.uJob.UBound,1)
'	'load additional header data
'	F.Intrinsic.String.Build("Select Description as Part,Customer,Customer_PO,Priority,Date_Due,Priority from v_JOB_Header where Job + '-' + Suffix = '\{0\}'",V.uGlobal.uJob(v.Local.i)!Job.trim,V.Local.sSql)
'	F.ODBC.Connection!conX.OpenRecordsetRO("rst",V.Local.sSql)
'	F.Intrinsic.Control.If(V.ODBC.conX!rst.EOF,<>,True)
'		V.uGlobal.uJob(v.Local.i)!Part.Set(V.ODBC.conX!rst.FieldValTrim!Part)
'		V.uGlobal.uJob(v.Local.i)!Customer_PO.Set(V.ODBC.conX!rst.FieldValTrim!Customer_PO)
'		V.uGlobal.uJob(v.Local.i)!Priority.Set(V.ODBC.conX!rst.FieldValTrim!Priority)
'		V.uGlobal.uJob(v.Local.i)!Date_Due.Set(V.ODBC.conX!rst.FieldVal!Date_Due)
'		'Get Customer+Name_Customer
'		F.Intrinsic.String.Build("Select Customer + ' - ' + Name_Customer as Customer from v_Customer_Master where Customer = '\{0\}'",V.ODBC.conX!rst.FieldValTrim!Customer,V.Local.sSql)
'		F.ODBC.Connection!conX.OpenRecordsetRO("rst2",V.Local.sSql)
'		F.Intrinsic.Control.If(V.ODBC.conX!rst2.EOF,<>,True)
'			V.uGlobal.uJob(v.Local.i)!Customer.Set(V.ODBC.conX!rst2.FieldValTrim!Customer)
'		F.Intrinsic.Control.EndIf
'		F.ODBC.conX!rst2.Close
'	F.Intrinsic.Control.EndIf
'	F.ODBC.conX!rst.Close
'
'	'Get Employees Name
'	F.Intrinsic.String.Build("Select Name from v_EMPLOYEE_MSTR where Employee = '\{0\}'",V.uGlobal.uJob(v.Local.i)!Employee,V.Local.sSql)
'	F.ODBC.Connection!conX.OpenRecordsetRO("rst2",V.Local.sSql)
'	F.Intrinsic.Control.If(V.ODBC.conX!rst2.EOF,<>,True)
'		V.uGlobal.uJob(v.Local.i)!Employee.Set(V.ODBC.conX!rst2.FieldValTrim!Name)
'	F.Intrinsic.Control.EndIf
'	F.ODBC.conX!rst2.Close
'	'get release date from custom table base on previous custom work customer has had done.
'	F.Intrinsic.String.Build("Select REL_DATE from GAB_WODASH_RELDT where JOB + '-' + SUFFIX = '\{0\}'",V.uGlobal.uJob(v.Local.i)!Job.Trim,V.Local.sSql)
'	F.ODBC.Connection!conX.OpenRecordsetRO("rst",V.Local.sSql)
'	F.Intrinsic.Control.If(V.ODBC.conX!rst.EOF,<>,True)
'		V.uGlobal.uJob(v.Local.i)!Release_Date.Set(V.ODBC.conX!rst.FieldVal!REL_DATE)
'	F.Intrinsic.Control.EndIf
'	F.ODBC.conX!rst.Close
'F.Intrinsic.Control.Next(V.Local.i)

'Sort by sequence date due ascending
F.Intrinsic.Variable.UDTMultiQuickSort(V.uGlobal.uJob!Seq_Date_Due,False)

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("GetOpenJobs_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_OPEN_JOBS_HTML_CAST.gas",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
Function.Intrinsic.Control.EndIf


Program.Sub.GetOpenJobs.End

Program.Sub.SaveCfgFile.Start
F.Intrinsic.Control.SetErrorHandler("SaveCfgFile_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)
'Save updated .cfg file that contains Workcenters and Cutoff Dates for data to be loaded on each HTML file
'double delimited by !*! and *!*

V.Local.sTemp.Declare(String)
V.Local.sFile.Declare(String)
V.Local.sFileContents.Declare(String)
V.Local.i.Declare(Long)
V.Local.iRows.Declare(Long)
V.Local.sRow.Declare(String)

V.Local.iRows.Set(V.Screen.F_MaintCfgFile!gsfg_Workcenters.Rows)
F.Intrinsic.Math.Sub(V.Local.iRows,1,V.Local.iRows)

'Build File Contents
F.Intrinsic.Control.For(V.Local.i,1,V.Local.iRows,1)
	Gui.F_MaintCfgFile.gsfg_Workcenters.ReadRow(V.Local.i,V.Local.sRow)
	V.Local.sTemp.Set(V.Local.sRow)
	F.Intrinsic.String.Split(V.Local.sRow,"*!*",V.Local.sRow)
	F.Intrinsic.Control.If(V.Local.sRow(0).trim,<>,"")
	F.Intrinsic.Control.AndIf(V.Local.sRow(3),<>,1)
		F.Intrinsic.String.Build("{0}:{1}",V.Global.sWCs,V.Local.sRow(0),V.Global.sWCs)
'		F.Intrinsic.String.Build("{0}*!*{1}",V.Local.sRow(0).Trim,V.Local.sRow(2),V.Local.sTemp)
		F.Intrinsic.String.Build("{0}{1}!*!",V.Local.sFileContents,V.Local.sTemp,V.Local.sFileContents)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.Next(V.Local.i)

'file to save .cfg to
F.Intrinsic.String.Build("{0}\Workcenters.cfg",V.Caller.FilesDir,V.Local.sFile)

F.Intrinsic.Control.If(V.Local.sFileContents.Trim,<>,"")
	F.Intrinsic.File.String2File(V.Local.sFile,V.Local.sFileContents)
F.Intrinsic.Control.EndIf

F.Intrinsic.Variable.AddRV("File",V.Local.sFile)

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("SaveCfgFile_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_OPEN_JOBS_HTML_CAST.gas",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
Function.Intrinsic.Control.EndIf


Program.Sub.SaveCfgFile.End

program.sub.f_maintcfgfile_unload.start
F.Intrinsic.Control.SetErrorHandler("f_maintcfgfile_unload_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)
F.Intrinsic.Control.End

F.Intrinsic.Control.Label("f_maintcfgfile_unload_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_OPEN_JOBS_HTML_CAST.gas",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
Function.Intrinsic.Control.EndIf


program.sub.f_maintcfgfile_unload.end

program.sub.cmdwcbrowse_click.start
F.Intrinsic.Control.SetErrorHandler("cmdwcbrowse_click_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)
V.Local.sRet.Declare(String)

'Return Workcenter to Grid if selected
Function.Intrinsic.UI.Browser(400,"",Variable.Local.sRet)
F.Intrinsic.Control.If(V.Local.sRet,<>,"***CANCEL***")
	F.Intrinsic.String.Split(V.Local.sRet,"*!*",V.Local.sRet)
	Gui.F_MaintCfgFile.gsfg_Workcenters.TextMatrix(0,V.Args.Row,V.Local.sRet(0))
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("cmdwcbrowse_click_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_OPEN_JOBS_HTML_CAST.gas",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
Function.Intrinsic.Control.EndIf


program.sub.cmdwcbrowse_click.end

program.sub.cmdsavewcs_click.start
F.Intrinsic.Control.SetErrorHandler("cmdsavewcs_click_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)
'Save configuration file with committed changes to grid
Gui.F_MaintCfgFile.gsfg_Workcenters.Commit
F.Intrinsic.Control.CallSub(Savecfgfile)

'recall buildstyle before reloading
F.Intrinsic.Control.CallSub(Buildstyles)
'load from file
F.Intrinsic.Control.CallSub(Load_gsfgworkcenters,"File",V.Args.File)

'Save Logo
F.Intrinsic.Control.CallSub(Savelogo)

'Delete Old Web Pages that are not valid for current WC's
F.Intrinsic.Control.CallSub(Deleteoldpages)

F.Intrinsic.Control.Label("cmdsavewcs_click_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_OPEN_JOBS_HTML_CAST.gas",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
Function.Intrinsic.Control.EndIf


program.sub.cmdsavewcs_click.end

program.sub.gsfg_workcenters_commandclick.start
F.Intrinsic.Control.SetErrorHandler("gsfg_workcenters_commandclick_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)

'browse for flexgrid and return it to grid
F.Intrinsic.Control.If(V.Args.Column,=,1)
	F.Intrinsic.Control.CallSub(Cmdwcbrowse_click,"Row",V.Args.Key)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("gsfg_workcenters_commandclick_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_OPEN_JOBS_HTML_CAST.gas",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
Function.Intrinsic.Control.EndIf


program.sub.gsfg_workcenters_commandclick.end

Program.Sub.BuildStyles.Start
F.Intrinsic.Control.SetErrorHandler("BuildStyles_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)

Gui.F_MaintCfgFile.gsfg_Workcenters.Cols(4)
Gui.F_MaintCfgFile.gsfg_Workcenters.Rows(1)
Gui.F_MaintCfgFile.gsfg_Workcenters.Rows(2)
Gui.F_MaintCfgFile.gsfg_Workcenters.FixedRows(1)

'WorkCenter
Gui.F_MaintCfgFile.gsfg_Workcenters.TextMatrix(0,0,"Workcenter")
Gui.F_MaintCfgFile.gsfg_Workcenters.BuildStyle(1,0,"Type","Locked",True)
Gui.F_MaintCfgFile.gsfg_Workcenters.BuildStyle(1,0,"Format","Alignment",2)

'Browse Workcenter
Gui.F_MaintCfgFile.gsfg_Workcenters.TextMatrix(1,0,"")
Gui.F_MaintCfgFile.gsfg_Workcenters.BuildStyle(1,1,"Type","Command","+")
Gui.F_MaintCfgFile.gsfg_Workcenters.BuildStyle(1,1,"Format","Alignment",4)

'Cutoff Date
Gui.F_MaintCfgFile.gsfg_Workcenters.TextMatrix(2,0,"Cutoff Days")
Gui.F_MaintCfgFile.gsfg_Workcenters.BuildStyle(1,2,"Format","Alignment",2)

'Remove WC
Gui.F_MaintCfgFile.gsfg_Workcenters.TextMatrix(3,0,"Remove")
Gui.F_MaintCfgFile.gsfg_Workcenters.BuildStyle(2,3,"Format","Alignment",4)
Gui.F_MaintCfgFile.gsfg_Workcenters.BuildStyle(1,3,"Type","Checkbox","")

'column %'s
Gui.F_MaintCfgFile.gsfg_Workcenters.SetColumnPercentages(".40:.10:.30:.20")

'Set Defualt to 7 Days
Gui.F_MaintCfgFile.gsfg_Workcenters.TextMatrix(2,1,7)

Gui.F_MaintCfgFile.gsfg_Workcenters.ApplyStyle(1,1)
Gui.F_MaintCfgFile.gsfg_Workcenters.ApplyStyle(0,2)

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("BuildStyles_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_OPEN_JOBS_HTML_CAST.gas",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
Function.Intrinsic.Control.EndIf


Program.Sub.BuildStyles.End

Program.Sub.load_gsfgWorkcenters.Start
F.Intrinsic.Control.SetErrorHandler("load_gsfgWorkcenters_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)
'if configuration file exists then load existing WC Data
V.Local.sGrid.Declare(String)
V.Local.iRows.Declare(Long)
V.Local.i.Declare(Long)

F.Intrinsic.File.File2String(V.Args.File,V.Local.sGrid)

Gui.F_MaintCfgFile.gsfg_Workcenters.LoadFromString(V.Local.sGrid,1)

'Apply Styles Correctly
V.Local.iRows.Set(V.Screen.F_MaintCfgFile!gsfg_Workcenters.Rows)
F.Intrinsic.Math.Sub(V.Local.iRows,1,V.Local.iRows)
F.Intrinsic.Control.For(V.Local.i,1,V.Local.iRows,1)
	Gui.F_MaintCfgFile.gsfg_Workcenters.ApplyStyle(V.Local.i,1)
F.Intrinsic.Control.Next(V.Local.i)

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("load_gsfgWorkcenters_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_OPEN_JOBS_HTML_CAST.gas",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
Function.Intrinsic.Control.EndIf


Program.Sub.load_gsfgWorkcenters.End

program.sub.cmdaddwc_click.start
F.Intrinsic.Control.SetErrorHandler("cmdaddwc_click_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)
V.Local.iRows.Declare(Long)
V.Local.i.Declare(Long)

'add a row
V.Local.iRows.Set(V.Screen.F_MaintCfgFile!gsfg_Workcenters.Rows)
F.Intrinsic.Math.Add(V.Local.iRows,1,V.Local.iRows)
Gui.F_MaintCfgFile.gsfg_Workcenters.Rows(V.Local.iRows)
'apply style
F.Intrinsic.Math.Sub(V.Local.iRows,1,V.Local.iRows)
F.Intrinsic.Control.For(V.Local.i,1,V.Local.iRows,1)
	Gui.F_MaintCfgFile.gsfg_Workcenters.ApplyStyle(V.Local.i,1)
F.Intrinsic.Control.Next(V.Local.i)

'set default days to 7
Gui.F_MaintCfgFile.gsfg_Workcenters.TextMatrix(2,V.Local.iRows,7)

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("cmdaddwc_click_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_OPEN_JOBS_HTML_CAST.gas",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
Function.Intrinsic.Control.EndIf


program.sub.cmdaddwc_click.end

program.sub.gsfg_workcenters_posttextmatrix.start
F.Intrinsic.Control.SetErrorHandler("gsfg_workcenters_posttextmatrix_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)
'Make sure input is integer no decimals or non-numeric allowed

V.Local.sRet.Declare(String)
V.Local.iRet.Declare(Long)
V.Local.bNumeric.Declare(Boolean)
F.Intrinsic.Control.If(V.Args.Column,=,2)
	Gui.F_MaintCfgFile.gsfg_Workcenters.GetTextMatrix(V.Args.Column,V.Args.Key,V.Local.sRet)
	F.Intrinsic.Math.IsNumeric(V.Local.sRet,V.Local.bNumeric)
	F.Intrinsic.Control.If(V.Local.bNumeric,=,False)
		Gui.F_MaintCfgFile.gsfg_Workcenters.TextMatrix(V.Args.Column,V.Args.Key,7)
	F.Intrinsic.Control.Else
		F.Intrinsic.Math.ConvertToFloat(V.Local.sRet,V.Local.iRet)
		Gui.F_MaintCfgFile.gsfg_Workcenters.TextMatrix(V.Args.Column,V.Args.Key,V.Local.iRet)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndIf


F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("gsfg_workcenters_posttextmatrix_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_OPEN_JOBS_HTML_CAST.gas",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
Function.Intrinsic.Control.EndIf


program.sub.gsfg_workcenters_posttextmatrix.end

program.sub.cmdlogobrws_click.start
F.Intrinsic.Control.SetErrorHandler("cmdlogobrws_click_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)
'Browse for logo that will be used for HTML Page. ".png" 280px X 85px
V.Local.sRet.Declare(String)
'only .png files allowed
F.Intrinsic.UI.ShowOpenFileDialog("","png|*.png","",V.Local.sRet)
F.Intrinsic.Control.If(V.Local.sRet,<>,"***CANCEL***")
	Gui.F_MaintCfgFile.txtLogo.Text(V.Local.sRet)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("cmdlogobrws_click_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_OPEN_JOBS_HTML_CAST.gas",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
Function.Intrinsic.Control.EndIf


program.sub.cmdlogobrws_click.end

Program.Sub.LoadLogo.Start
F.Intrinsic.Control.SetErrorHandler("LoadLogo_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)
V.Local.sFile.Declare(String)
V.Local.sRet.Declare(String)
V.Local.bExists.Declare(Boolean)

'load logo filepath that is being used from .cfg file

F.Intrinsic.String.Build("{0}\HTML\Logo.cfg",V.Caller.FilesDir,V.Local.sFile)
F.Intrinsic.File.Exists(V.Local.sFile,V.Local.bExists)
F.Intrinsic.Control.If(V.Local.bExists,=,True)
	F.Intrinsic.File.File2String(V.Local.sFile,V.Local.sRet)
	F.Intrinsic.Control.If(V.Local.sRet.Trim,<>,"")
		Gui.F_MaintCfgFile.txtLogo.Text(V.Local.sRet.Trim)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("LoadLogo_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_OPEN_JOBS_HTML_CAST.gas",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
Function.Intrinsic.Control.EndIf


Program.Sub.LoadLogo.End

Program.Sub.SaveLogo.Start
F.Intrinsic.Control.SetErrorHandler("SaveLogo_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)
V.Local.sFile.Declare(String)
V.Local.bExists.Declare(Boolean)
V.Local.bExists2.Declare(Boolean)

'default file path that is used by template
F.Intrinsic.String.Build("{0}\HTML\imgs\customer-logo_fpo.png",V.Caller.FilesDir,V.Local.sFile)
F.Intrinsic.File.Exists(V.Local.sFile,V.Local.bExists)

'New Logo File Path From Screen
F.Intrinsic.File.Exists(V.Screen.F_MaintCfgFile!txtLogo.Text,V.Local.bExists2)

F.Intrinsic.Control.If(V.Local.bExists,=,True)
F.Intrinsic.Control.AndIf(V.Local.bExists2,=,True)
	'delete template image
	F.Intrinsic.File.DeleteFile(V.Local.sFile)
	'replace template logo image with Logo path from screen
	F.Intrinsic.File.CopyFile(V.Screen.F_MaintCfgFile!txtLogo.Text,V.Local.sFile)
	'Save Configuration File to store Logo that is currently being used
	F.Intrinsic.String.Build("{0}\HTML\Logo.cfg",V.Caller.FilesDir,V.Local.sFile)
	F.Intrinsic.File.String2File(V.Local.sFile,V.Screen.F_MaintCfgFile!txtLogo.Text)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("SaveLogo_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_OPEN_JOBS_HTML_CAST.gas",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
Function.Intrinsic.Control.EndIf


Program.Sub.SaveLogo.End

Program.Sub.DeleteOldPages.Start
F.Intrinsic.Control.SetErrorHandler("DeleteOldPages_Err")
F.Intrinsic.Control.ClearErrors
'Deletes all html files that are no longer valid for current workcenter configuration
V.Local.sError.Declare(String)
V.Local.sFile.Declare(String)
V.Local.sFileList.Declare(String)
V.Local.sRet.Declare(String)
V.Local.bExists.Declare(Boolean)
V.Local.i.Declare(Long)
V.Local.i2.Declare(Long)
V.Local.bStatus.Declare(Boolean)

'get listing of HTML files
F.Intrinsic.String.Build("{0}\HTML\OPEN_JOBS_*",V.Caller.FilesDir,V.Local.sFile)
F.Intrinsic.File.GetFileList(V.Local.sFile,V.Local.sFileList)

'split list of current workcenters to loop through below and compare against file list
F.intrinsic.string.split(V.Global.sWCs,":",V.Global.sWCs)

'loop through file list of HTML pages for workcenters
F.Intrinsic.Control.If(V.Local.sFileList.Trim,<>,"")
	F.Intrinsic.String.Split(V.Local.sFileList,":",V.Local.sFileList)
	F.Intrinsic.Control.For(V.Local.i,V.Local.sFileList.LBound,V.Local.sFileList.UBound,1)
		F.Intrinsic.Control.If(V.Local.sFileList(v.Local.i).Trim,<>,"OPEN_JOBS_TEMP.html")
			F.Intrinsic.String.Split(V.Local.sFileList(v.Local.i),"_",V.Local.sRet)
			F.Intrinsic.String.Split(V.Local.sRet(2).Trim,".",V.Local.sRet)
			'Loop through current WC's from .cfg file and compare if they do not match then delete html file
			V.Local.bStatus.Set(False)
			F.Intrinsic.Control.For(V.Local.i2,V.Global.sWCs.LBound,V.Global.sWCs.UBound,1)
				F.Intrinsic.Control.If(V.Global.sWCs(v.Local.i2).Trim,<>,"")
					F.Intrinsic.Control.If(V.Local.sRet(0).Trim,=,V.Global.sWCs(v.Local.i2).Trim)
						V.Local.bStatus.Set(True)
					F.Intrinsic.Control.EndIf
				F.Intrinsic.Control.EndIf
			F.Intrinsic.Control.Next(V.Local.i2)
			F.Intrinsic.Control.If(V.Local.bStatus,<>,True)
				'double check for file existing before deleting
				F.Intrinsic.String.Build("{0}\HTML\{1}",V.Caller.FilesDir,V.Local.sFileList(V.Local.i),V.Local.sFile)
				F.Intrinsic.File.Exists(V.Local.sFile,V.Local.bExists)
				F.Intrinsic.Control.If(V.Local.bExists,=,True)
					F.Intrinsic.File.DeleteFile(V.Local.sFile)
				F.Intrinsic.Control.EndIf
			F.Intrinsic.Control.EndIf
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.Next(V.Local.i)
F.Intrinsic.Control.EndIf
F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("DeleteOldPages_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_OPEN_JOBS_HTML_CAST.gas",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
Function.Intrinsic.Control.EndIf


Program.Sub.DeleteOldPages.End

Program.Sub.Comments.Start
${$0$}$Test Script$}$SFF$}$7/30/2014 10:28:13 AM
Program.Sub.Comments.End

